sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/odata/v4/ODataModel",
    "../model/formatter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/MessageToast",
    "sap/m/Dialog",
    "sap/m/Button",
    "sap/m/Text",
    "sap/m/Input",
    "sap/m/Select",
    "sap/ui/core/Item",
    "sap/ui/layout/form/SimpleForm"
], (Controller, JSONModel, ODataModel, formatter, Filter, FilterOperator, MessageToast, Dialog, Button, Text, Input, Select, Item, SimpleForm) => {
    "use strict";

    return Controller.extend("ui5.walkthrough.controller.InvoiceList", {
        formatter: formatter,

        onInit() {
            console.log("InvoiceList.controller");

            const sServiceUrl = "https://port4004-workspaces-ws-z7sjw.us10.trial.applicationstudio.cloud.sap/odata/v4/invoice/";
            try {
                const oModel = new ODataModel({
                    serviceUrl: sServiceUrl,
                    synchronizationMode: "None",
                    autoExpandSelect: true,
                    operationMode: "Server"
                });
                this.getView().setModel(oModel, "invoice");
            } catch (error) {
                console.error("ODataModel 초기화 실패:", error);
            }

            const oViewModel = new JSONModel({
                currency: "EUR",
                selectedItem: null
            });
            this.getView().setModel(oViewModel, "view");

            let oResourceModel = this.getView().getModel("i18n");
            if (!oResourceModel) {
                oResourceModel = new sap.ui.model.resource.ResourceModel({
                    bundleName: "ui5.walkthrough.i18n.i18n"
                });
                this.getView().setModel(oResourceModel, "i18n");
            }

            const oResourceBundle = oResourceModel.getResourceBundle();

            const oStatusModel = new JSONModel({
                statuses: [
                    { key: 'A', text: oResourceBundle.getText('invoiceStatusA') },
                    { key: 'B', text: oResourceBundle.getText('invoiceStatusB') },
                    { key: 'C', text: oResourceBundle.getText('invoiceStatusC') }
                ]
            });
            this.getView().setModel(oStatusModel, 'statuses');

            const oCurrencyModel = new JSONModel({
                currencies: [
                    { key: 'EUR', text: 'Euro' },
                    { key: 'USD', text: 'US Dollar' }
                ]
            });
            this.getView().setModel(oCurrencyModel, 'currencies');

            this._clickTimer = null;
            this._clickDelay = 300;
        },

        onSelectionChange: function (oEvent) {
            var oTable = oEvent.getSource();
            var oSelectedItem = oTable.getSelectedItem();

            if (oSelectedItem) {
                var oBindingContext = oSelectedItem.getBindingContext("invoice");
                this.getView().getModel("view").setProperty("/selectedItem", oBindingContext ? oBindingContext.getPath() : null);
            } else {
                this.getView().getModel("view").setProperty("/selectedItem", null);
            }
        },

        onPress: async function (oEvent) {
            const oSelectedItem = oEvent.getSource();
            if (oSelectedItem) {
                if (this._clickTimer) {
                    clearTimeout(this._clickTimer);
                    this._clickTimer = null;

                    const oRouter = this.getOwnerComponent().getRouter();
                    oRouter.navTo("detail", {
                        invoicePath: window.encodeURIComponent(oSelectedItem.getBindingContext("invoice").getPath().substr(1))
                    });
                } else {
                    this._clickTimer = setTimeout(() => {
                        this._clickTimer = null;
                        this._selectItem(oSelectedItem);
                    }, this._clickDelay);
                }
            }
        },

        _selectItem: function (oItem) {
            const oTable = this.byId("invoiceList");
            oTable.setSelectedItem(oItem);

            const sPath = oItem.getBindingContext("invoice").getPath();
            this.getView().getModel("view").setProperty("/selectedItem", sPath);
        },

        onAdd: async function () {
            const oView = this.getView();
            const oModel = oView.getModel("invoice");
            const oListBinding = oModel.bindList("/Invoices");
        
            const oData = {
                ProductName: "New Product",
                Quantity: 1,
                ShipperName: "New Shipper",
                Status: "A",
                ExtendedPrice: 100.0,
                CurrencyCode: "USD"
            };
        
            try {
                const oContext = oListBinding.create(oData);
                await oContext.created();  // 데이터가 성공적으로 생성될 때까지 대기
                MessageToast.show("Invoice가 성공적으로 추가되었습니다.");
                
                // 자동 갱신을 위해 모델에서 데이터를 강제로 새로고침
                await oModel.refresh();
            } catch (error) {
                console.error("Invoice 추가에 실패했습니다.", error);
                MessageToast.show("Invoice 추가에 실패했습니다.");
            }
            this._openDialog("Add");
        },

        // onAdd: function () {
            
        // },

        onEdit: function () {
            const oViewModel = this.getView().getModel("view");
            const sSelectedPath = oViewModel.getProperty("/selectedItem");

            if (sSelectedPath) {
                this._openDialog("Edit", sSelectedPath);
            }
        },

        _getSelectedValue: function (sSelectId, sModelName) {
            const oSelect = this.byId(sSelectId);
            const sSelectedKey = oSelect.getSelectedKey();
            const oModel = this.getView().getModel(sModelName);

            if (!oModel) {
                console.error(`모델 '${sModelName}'을 찾을 수 없습니다.`);
                return '';
            }

            const aItems = oModel.getProperty(`/${sModelName}`) || [];
            const oSelectedItem = aItems.find(item => item.key === sSelectedKey);
            
            return oSelectedItem ? oSelectedItem.key : '';
        },

        _openDialog: function (sAction, sPath) {
            console.log("Dialog를 열고 있습니다. 액션:", sAction, "경로:", sPath);

            const oView = this.getView();
            const sUniqueId = jQuery.sap.uid();
            const oDialog = new Dialog({
                title: sAction === "Add" ? "Invoice 추가" : "Invoice 수정",
                // content: [
                //     new SimpleForm({
                //         // layout: "ResponsiveGridLayout", // 레이아웃을 ResponsiveGridLayout으로 설정
                //         // labelSpanL: 3, // 라벨의 너비를 조정
                //         // labelSpanM: 3,
                //         // columnsL: 1, // 모든 라벨과 입력 필드를 세로로 배치
                //         // columnsM: 1,
                //         content: [
                //             new Text({ text: "제품명" }),
                //             new Input(this.createId(sUniqueId + "-productNameInput"), { value: "{invoice>ProductName}" }),
                //             new Text({ text: "수량" }),
                //             new Input(this.createId(sUniqueId + "-quantityInput"), { type: "Number", value: "{invoice>Quantity}" }),
                //             new Text({ text: "배송업체명" }),
                //             new Input(this.createId(sUniqueId + "-shipperNameInput"), { value: "{invoice>ShipperName}" }),
                //             new Text({ text: "상태" }),
                //             new Select({
                //                 id: this.createId(sUniqueId + "-statusSelect"),
                //                 items: {
                //                     path: 'statuses>/statuses',
                //                     template: new Item({
                //                         key: '{statuses>key}',
                //                         text: '{statuses>text}'
                //                     })
                //                 },
                //                 selectedKey: "{invoice>Status}"
                //             }),
                //             new Text({ text: "총액" }),
                //             new Input(this.createId(sUniqueId + "-extendedPriceInput"), { type: "Number", value: "{invoice>ExtendedPrice}" }),
                //             new Text({ text: "통화" }),
                //             new Select({
                //                 id: this.createId(sUniqueId + "-currencySelect"),
                //                 items: {
                //                     path: 'currencies>/currencies',
                //                     template: new Item({
                //                         key: '{currencies>key}',
                //                         text: '{currencies>text}'
                //                     })
                //                 },
                //                 selectedKey: "{invoice>CurrencyCode}"
                //             })
                //         ]
                //     })
                // ],
                content: [
                    new Text({ text: "제품명" }),
                    new Input(this.createId(sUniqueId + "-productNameInput"), { placeholder: "Product Name", value: sAction === "Edit" ? "{invoice>ProductName}" : "" }),
                    new Input(this.createId(sUniqueId + "-quantityInput"), { placeholder: "Quantity", type: "Number", value: sAction === "Edit" ? "{invoice>Quantity}" : "" }),
                    new Input(this.createId(sUniqueId + "-shipperNameInput"), { placeholder: "Shipper Name", value: sAction === "Edit" ? "{invoice>ShipperName}" : "" }),
                    new Select({
                        id: this.createId(sUniqueId + "-statusSelect"),
                        items: {
                            path: 'statuses>/statuses',
                            template: new Item({
                                key: '{statuses>key}',
                                text: '{statuses>text}'
                            })
                        }
                    }),
                    new Input(this.createId(sUniqueId + "-extendedPriceInput"), { placeholder: "Extended Price", type: "Number", value: sAction === "Edit" ? "{invoice>ExtendedPrice}" : "" }),
                    new Select({
                        id: this.createId(sUniqueId + "-currencySelect"),
                        items: {
                            path: 'currencies>/currencies',
                            template: new Item({
                                key: '{currencies>key}',
                                text: '{currencies>text}'
                            })
                        },
                        selectedKey: sAction === "Edit" ? "{invoice>CurrencyCode}" : "EUR"
                    })
                ],
                // beginButton: new Button({
                //     text: sAction === "Add" ? "저장" : "수정",
                //     press: async () => {
                //         const oModel = oView.getModel("invoice");
                //         const oData = {
                //             ProductName: this.byId(sUniqueId + "-productNameInput").getValue(),
                //             Quantity: parseFloat(this.byId(sUniqueId + "-quantityInput").getValue()),
                //             ShipperName: this.byId(sUniqueId + "-shipperNameInput").getValue(),
                //             Status: this.byId(sUniqueId + "-statusSelect").getSelectedKey(),
                //             ExtendedPrice: parseFloat(this.byId(sUniqueId + "-extendedPriceInput").getValue()),
                //             CurrencyCode: this.byId(sUniqueId + "-currencySelect").getSelectedKey()
                //         };
                //         console.log(oData);
                //         try {
                //             if (sAction === "Add") {
                //                 const oListBinding = oModel.bindList("/Invoices");
                //                 const oContext = oListBinding.create(oData);
                //                 await oContext.created();
                //                 MessageToast.show("Invoice가 성공적으로 추가되었습니다.");
                //                 oDialog.close();
                //             } else if (sAction === "Edit" && sPath) {
                //                 const oContext = oModel.bindContext(sPath);
                //                 await oContext.requestObject();
                //                 await Promise.all(Object.keys(oData).map(key => 
                //                     oContext.setProperty(key, oData[key])
                //                 ));
                //                 await oModel.submitBatch("$auto");
                //                 MessageToast.show("Invoice가 성공적으로 수정되었습니다.");
                //                 oDialog.close();
                //             }
                //         } catch (error) {
                //             console.error(sAction === "Add" ? "Invoice 추가에 실패했습니다." : "Invoice 수정에 실패했습니다.", error);
                //             MessageToast.show(sAction === "Add" ? "Invoice 추가에 실패했습니다." : "Invoice 수정에 실패했습니다.");
                //         }
                //     }
                // }),
                beginButton: new Button({
                    text: sAction === "Add" ? "저장" : "수정",
                    press: async () => {
                        const oModel = oView.getModel("invoice");
                        const oData = {
                            ProductName: this.byId(sUniqueId + "-productNameInput").getValue(),
                            Quantity: parseFloat(this.byId(sUniqueId + "-quantityInput").getValue()),
                            ShipperName: this.byId(sUniqueId + "-shipperNameInput").getValue(),
                            Status: this.byId(sUniqueId + "-statusSelect").getSelectedKey(),
                            ExtendedPrice: parseFloat(this.byId(sUniqueId + "-extendedPriceInput").getValue()),
                            CurrencyCode: this.byId(sUniqueId + "-currencySelect").getSelectedKey()
                        };
                        console.log(oData);
                        try {
                            if (sAction === "Add") {
                                const oListBinding = oModel.bindList("/Invoices");
                                const oContext = oListBinding.create(oData);
                                await oContext.created();
                                MessageToast.show("Invoice가 성공적으로 추가되었습니다.");
                            } else if (sAction === "Edit") {
                                const oBindingContext = oDialog.getBindingContext("invoice");
                                await oBindingContext.requestObject(); // 데이터 로드가 완료될 때까지 대기
                                Object.keys(oData).forEach(key => {
                                    oBindingContext.setProperty(key, oData[key]);
                                });
                                await oModel.submitBatch("$auto");
                                MessageToast.show("Invoice가 성공적으로 수정되었습니다.");
                            }
                            oDialog.close();
                        } catch (error) {
                            console.error(sAction === "Add" ? "Invoice 추가에 실패했습니다." : "Invoice 수정에 실패했습니다.", error);
                            MessageToast.show(sAction === "Add" ? "Invoice 추가에 실패했습니다." : "Invoice 수정에 실패했습니다.");
                        }
                    }
                }),
                endButton: new Button({
                    text: "취소",
                    press: () => {
                        oDialog.close();
                    }
                })
            });

            if (sAction === "Edit" && sPath && sPath.startsWith('/')) {
                oDialog.bindElement({
                    path: sPath,
                    model: "invoice",
                    events: {
                        dataReceived: function () {
                            const oContext = oDialog.getBindingContext("invoice");
                            if (oContext) {
                                const oData = oContext.getObject();
                                oDialog.getContent()[0].setValue(oData.ProductName);
                                oDialog.getContent()[1].setValue(oData.Quantity);
                                oDialog.getContent()[2].setValue(oData.ShipperName);
                                oDialog.getContent()[3].setSelectedKey(oData.Status);
                                oDialog.getContent()[4].setValue(oData.ExtendedPrice);
                                oDialog.getContent()[5].setSelectedKey(oData.CurrencyCode);
                            }
                        }
                    }
                });
            } else if (sAction === "Add") {
                oDialog.unbindElement();
                // Reset the input fields
                oDialog.getContent().forEach(control => {
                    if (control instanceof Input) {
                        control.setValue("");
                    } else if (control instanceof Select) {
                        control.setSelectedKey("");
                    }
                });
            } else {
                console.error("잘못된 바인딩 경로:", sPath);
            }

            oView.addDependent(oDialog);
            oDialog.open();
            oModel.refresh();
        },

        
        // onDelete: async function () {
        //     const oViewModel = this.getView().getModel("view");
        //     const sSelectedPath = oViewModel.getProperty("/selectedItem");
        //     console.log("Selected Path: ", sSelectedPath);
        
        //     if (sSelectedPath) {
        //         const oModel = this.getView().getModel("invoice");
        //         const oContext = oModel.getContext(sSelectedPath);
        
        //         try {
        //             if (oContext) {
        //                 await oContext.delete("$auto"); // Using '$auto' group for automatic submission
        //                 MessageToast.show("Invoice has been successfully deleted.");
        //                 oModel.refresh(true); // Optionally refresh the model to update the view
        //             } else {
        //                 throw new Error("Unable to retrieve context for the given path.");
        //             }
        //         } catch (error) {
        //             console.error("Failed to delete invoice:", error);
        //             MessageToast.show("Failed to delete invoice.");
        //         }
        //     } else {
        //         MessageToast.show("No invoice selected for deletion.");
        //     }
        // },
        onDelete: async function () {
            const oViewModel = this.getView().getModel("view");
            const sSelectedPath = oViewModel.getProperty("/selectedItem");
            console.log("선택된 경로: ", sSelectedPath);
        
            if (sSelectedPath) {
                const oModel = this.getView().getModel("invoice");
                const oList = this.byId("invoiceList");
                const oItem = oList.getItems().find(item => {
                    const oContext = item.getBindingContext("invoice");
                    if (oContext) {
                        console.log("아이템 경로: ", oContext.getPath());
                        return oContext.getPath() === sSelectedPath;
                    }
                    return false;
                });
        
                if (oItem) {
                    const oBindingContext = oItem.getBindingContext("invoice");
        
                    try {
                        if (oBindingContext) {
                            await oBindingContext.delete("$auto"); // 자동 제출을 위해 '$auto' 그룹 ID 사용
                            MessageToast.show("Invoice가 성공적으로 삭제되었습니다.");
                            await oModel.refresh(); // 모델을 새로 고쳐서 뷰를 업데이트합니다.
                        } else {
                            throw new Error("주어진 경로에 대한 컨텍스트를 가져올 수 없습니다.");
                        }
                    } catch (error) {
                        console.error("Invoice 삭제에 실패했습니다:", error);
                        MessageToast.show("Invoice 삭제에 실패했습니다.");
                    }
                } else {
                    MessageToast.show("선택된 항목이 더 이상 사용할 수 없습니다.");
                }
            } else {
                MessageToast.show("삭제할 Invoice가 선택되지 않았습니다.");
            }
        },
        
        
        
        // onDelete: async function () {
        //     const oViewModel = this.getView().getModel("view");
        //     const sSelectedPath = oViewModel.getProperty("/selectedItem");
        //     console.log("Selected Path: ", sSelectedPath);
        
        //     if (sSelectedPath) {
        //         const oModel = this.getView().getModel("invoice");
        
        //         // Obtain the context directly from the OData model
        //         const oBindingContext = oModel.bindContext(sSelectedPath); 
        
        //         try {
        //             if (oBindingContext) {
        //                 // Delete the context
        //                 await oBindingContext.delete("$auto"); // Use '$auto' group ID for automatic submission
        
        //                 // Show success message
        //                 MessageToast.show("Invoice has been successfully deleted.");
        
        //                 // Optionally refresh the model to update the view
        //                 await oModel.refresh(true);
        //             } else {
        //                 throw new Error("Unable to retrieve context for the given path.");
        //             }
        //         } catch (error) {
        //             // Log and show error message
        //             console.error("Failed to delete invoice:", error);
        //             MessageToast.show("Failed to delete invoice.");
        //         }
        //     } else {
        //         MessageToast.show("No invoice selected for deletion.");
        //     }
        // },
        
        
        

        onFilterInvoices(oEvent) {
            const aFilter = [];
            const sQuery = oEvent.getParameter("query");
            console.log("Filtering with query: ", sQuery);

            if (sQuery) {
                aFilter.push(new Filter("ProductName", FilterOperator.Contains, sQuery));
            }

            console.log("Filters: ", aFilter);

            const oList = this.byId("invoiceList");
            const oBinding = oList.getBinding("items");
            oBinding.filter(aFilter);
        }
    });
});







INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'f8c8a1b0-4f7a-4c0e-9d9b-bc9f08e7d2f9', 
    'Pulp Fiction', 
    1, 
    'Miramax', 
    17.99, 
    'USD', 
    'Available', 
    'https://example.com/images/pulpfiction.jpg', 
    'The lives of two mob hitmen, a boxer, a gangster\'s wife, and a pair of diner bandits intertwine in four tales of violence and redemption.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'a5f3b6c8-9a4b-4b65-9821-e5c4e5d6e4a8', 
    'The Shawshank Redemption', 
    1, 
    'Columbia Pictures', 
    21.99, 
    'USD', 
    'Available', 
    'https://example.com/images/shawshank.jpg', 
    'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'd6a4f2b3-2b3e-4d54-a8d2-993f39b15e3b', 
    'Forrest Gump', 
    1, 
    'Paramount Pictures', 
    18.99, 
    'USD', 
    'Available', 
    'https://example.com/images/forrestgump.jpg', 
    'The presidencies of Kennedy and Johnson, the Vietnam War, the Watergate scandal, and other historical events unfold from the perspective of an Alabama man with an IQ of 75.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'b1c2d3e4-f5a6-7b8c-9d0e-f1a2b3c4d5e6', 
    'Gladiator', 
    1, 
    'DreamWorks', 
    16.99, 
    'USD', 
    'Available', 
    'https://example.com/images/gladiator.jpg', 
    'A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'c6d7e8f9-0a1b-2c3d-4e5f-67890abcdef', 
    'The Dark Knight', 
    1, 
    'Warner Bros.', 
    22.99, 
    'USD', 
    'Available', 
    'https://example.com/images/darkknight.jpg', 
    'When the menace known as The Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'd7e8f9a0-1b2c-3d4e-5f6g-7890hijkl1m2', 
    'Fight Club', 
    1, 
    '20th Century Fox', 
    15.99, 
    'USD', 
    'Available', 
    'https://example.com/images/fightclub.jpg', 
    'An insomniac office worker and a devil-may-care soap maker form an underground fight club that evolves into much more.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'e8f9a0b1-2c3d-4e5f-6g7h-8901ijkl23mn', 
    'Inglourious Basterds', 
    1, 
    'The Weinstein Company', 
    19.99, 
    'USD', 
    'Available', 
    'https://example.com/images/inglouriousbasterds.jpg', 
    'In Nazi-occupied France during World War II, a group of Jewish-American soldiers known as "The Basterds" are on a mission to kill Nazis.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'f9a0b1c2-3d4e-5f6g-7h8i-901jklm23nop', 
    'Django Unchained', 
    1, 
    'The Weinstein Company', 
    18.99, 
    'USD', 
    'Available', 
    'https://example.com/images/djangounchained.jpg', 
    'With the help of a German bounty hunter, a freed slave sets out to rescue his wife from a brutal Mississippi plantation owner.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'a0b1c2d3-4e5f-6789-0abc-d1ef2g3h4i5j', 
    'The Revenant', 
    1, 
    '20th Century Fox', 
    21.99, 
    'USD', 
    'Available', 
    'https://example.com/images/revenant.jpg', 
    'In the 1820s, a frontiersman on a quest for survival after being left for dead by members of his own hunting team.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'b1c2d3e4-5f6g-7890-abcd-1e2f3g4h5i6j', 
    'Jurassic Park', 
    1, 
    'Universal Pictures', 
    16.99, 
    'USD', 
    'Available', 
    'https://example.com/images/jurassicpark.jpg', 
    'During a preview tour, a theme park suffers a major power breakdown that allows its cloned dinosaur exhibits to run amok.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'c2d3e4f5-6g7h-8901-ijkl-2m3n4op5qr6s', 
    'Avatar', 
    1, 
    '20th Century Fox', 
    19.99, 
    'USD', 
    'Available', 
    'https://example.com/images/avatar.jpg', 
    'A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'd3e4f5g6-7h8i-901j-klmn-3op4qr5st6u7', 
    'Titanic', 
    1, 
    'Paramount Pictures', 
    17.99, 
    'USD', 
    'Available', 
    'https://example.com/images/titanic.jpg', 
    'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'e4f5g6h7-8i9j-0klm-nopq-4rst5u6v7w8x', 
    'The Avengers', 
    1, 
    'Walt Disney Studios', 
    18.99, 
    'USD', 
    'Available', 
    'https://example.com/images/avengers.jpg', 
    'Earth mightiest heroes must come together and learn to fight as a team if they are to stop the mischievous Loki and his alien army from enslaving humanity.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'f5g6h7i8-9j0k-lmno-pqrs-5tuv6w7x8y9z', 
    'Guardians of the Galaxy', 
    1, 
    'Walt Disney Studios', 
    20.99, 
    'USD', 
    'Available', 
    'https://example.com/images/guardiansgalaxy.jpg', 
    'A group of intergalactic criminals must pull together to stop a fanatical warrior with plans to purge the universe.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'g6h7i8j9-0klm-nopq-rstu-6vw7x8y9z0a1', 
    'The Lion King', 
    1, 
    'Walt Disney Studios', 
    16.99, 
    'USD', 
    'Available', 
    'https://example.com/images/lionking.jpg', 
    'Lion prince Simba and his father are targeted by his bitter uncle, who wants to take over the throne.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'h7i8j9k0-lmno-pqrs-tuvw-7xy8z0a1b2c3', 
    'Finding Nemo', 
    1, 
    'Walt Disney Studios', 
    15.99, 
    'USD', 
    'Available', 
    'https://example.com/images/findingnemo.jpg', 
    'After his son is captured in the Great Barrier Reef and taken to Sydney, a timid clownfish sets out on a journey to bring him home.'
);
INSERT INTO "MY_INVOICE_APP_INVOICES" 
    ("INVOICEID", "PRODUCTNAME", "QUANTITY", "SHIPPERNAME", "EXTENDEDPRICE", "CURRENCYCODE", "STATUS", "IMAGEURL","PLOTSUMMARY" ) 
VALUES
(
    'i8j9k0l1-mnop-qrst-uvwx-8yz0a1b2c3d4', 
    'Frozen', 
    1, 
    'Walt Disney Studios', 
    17.99, 
    'USD', 
    'Available', 
    'https://example.com/images/frozen.jpg', 
    'When their kingdom is trapped in an eternal winter, fearless Anna joins forces with a rugged ice harvester to find her sister Elsa, whose icy powers have trapped the land in a perpetual winter.'
);

